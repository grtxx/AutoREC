//---------------------------------------------------------------------------


#pragma hdrstop

#include "grtdxutils.h"

//---------------------------------------------------------------------------

IBaseFilter* CreateBaseFilterByCLSID(System::TGUID cat)
{
  IBaseFilter *temp;
  CoCreateInstance(cat,NULL,CLSCTX_INPROC,IID_IBaseFilter, (void**)&temp);
  return temp;
}

IBaseFilter* CreateBaseFilterByCatAndName(System::TGUID cat, AnsiString Name)
{
  ICreateDevEnum *SysDev;
  IEnumMoniker *Enum;
  IMoniker *aMoniker;
  IPropertyBag *pbag;
  VARIANT s;
  AnsiString ss;
  IBaseFilter *result;

  CoCreateInstance(CLSID_SystemDeviceEnum, NULL, CLSCTX_INPROC, IID_ICreateDevEnum, (void**)&SysDev);
  SysDev->CreateClassEnumerator(cat, &Enum, 0);

  result=NULL;
  while (Enum->Next(1,&aMoniker,NULL)==S_OK)
  {
    if (aMoniker!=NULL)
    {
      aMoniker->BindToStorage(NULL,NULL,IID_IPropertyBag, (void**)&pbag);
      s.vt=VT_BSTR;
      pbag->Read(L"FriendlyName",&s,NULL);
      ss=s.bstrVal;
      if (LowerCase(ss)==LowerCase(Name)) aMoniker->BindToObject(NULL,NULL,IID_IBaseFilter,(void**)&result);
      aMoniker->Release();
    }
  }
  Enum->Release();
  SysDev->Release();
  ss="";
  return result;
}

IPin* FindPinByName(IBaseFilter *pfilter, wchar_t PinName)
{
  IPin *pPin;
  pfilter->FindPin(&PinName,&pPin);
  return pPin;
}

IPin* FindFreePin(IBaseFilter *pfilter, int direction)
{
  IPin *pPin = NULL;
  IPin *pFPin = NULL;
  IPin *pTempPin = NULL;
  IEnumPins *ppEnum = NULL;
  PIN_DIRECTION pindirection;

  pFPin=NULL;
  pfilter->EnumPins(&ppEnum);
  while ((ppEnum!=NULL) && (ppEnum->Next(1,&pPin,0)==S_OK) && (pFPin==NULL))
  {
        if (pPin!=NULL)
        {
                pPin->ConnectedTo(&pTempPin);
                pPin->QueryDirection(&pindirection);
                if ((pTempPin==NULL) && (pindirection==direction)) pFPin=pPin;
        }
  }
  if (ppEnum!=NULL) ppEnum->Release();
  return pFPin;
}

IPin* FindFreeInputPin(IBaseFilter *pfilter)
{
  return FindFreePin(pfilter,PINDIR_INPUT);
}

IPin* FindFreeOutputPin(IBaseFilter *pfilter)
{
  return FindFreePin(pfilter,PINDIR_OUTPUT);
}


#pragma package(smart_init)
